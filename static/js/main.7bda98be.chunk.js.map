{"version":3,"sources":["components/Header/Header.js","components/Menu/Menu.js","components/Layout/Layout.js","components/Content/ProfileData/ProfileData.js","store/actions/content.js","store/actions/actionTypes.js","components/Input/Input.js","components/Search/Search.js","components/Content/Repositories/Repository/Repository.js","helpers/miscellenous.js","components/Content/Repositories/Repositories.js","components/Content/Content.js","App.js","serviceWorker.js","store/utility.js","store/reducer/content.js","index.js"],"names":["Header","props","className","Menu","class","href","Layout","children","connect","state","profileData","content","dispatch","onGetProfileData","axios","get","then","response","data","type","catch","error","alert","useEffect","alt","src","avatar_url","name","login","bio","company","location","Input","placeholder","onChange","event","inputChangeHandler","Search","search","target","value","Repository","style","display","justifyContent","repository","language","date","month","Date","getMonth","day","getDate","getFullYear","convertDateFormat","pushed_at","repositories","onGetUserRepositories","useState","searchedRepositories","setSearchedRepositories","searchValue","setSearchValue","item","console","log","filter","toLowerCase","searchRepository","length","map","trim","Content","App","Boolean","window","hostname","match","updateObject","oldObject","updatedProperties","initialState","setProfileData","action","setUserRepositories","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","basename","process","split","pop","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mWAWeA,G,YARA,SAACC,GACZ,OACI,yBAAKC,UAAU,yCAAf,aCQOC,G,MAVF,SAACF,GACV,OACI,yBAAKG,MAAM,QACP,uBAAGC,KAAK,aAAR,YACA,uBAAGA,KAAK,iBAAR,gBACA,uBAAGA,KAAK,aAAR,eCQGC,EAXA,SAACL,GACZ,OACI,yBAAKC,UAAU,UACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACCD,EAAMM,W,yBCgCJC,G,MAAAA,aAZS,SAAAC,GACpB,MAAO,CACHC,YAAaD,EAAME,QAAQD,gBAIR,SAAAE,GACvB,MAAO,CACHC,iBAAkB,kBAAMD,GC7BrB,SAAAA,GACHE,IAAMC,IAAN,gDACKC,MAAK,SAAAC,GACEA,EAASC,MACTN,EAV4B,CAC5CO,KCC4B,mBDA5BT,YAQwCO,EAASC,UAGxCE,OAAM,SAAAC,GACHC,MAAM,uBDyBPd,EArCK,SAACP,GAMjB,OAJAsB,qBAAU,WACNtB,EAAMY,qBACP,IAGC,yBAAKX,UAAU,gBACX,yBAAKA,UAAU,cAAcsB,IAAI,UAAUC,IAAKxB,EAAMS,YAAYgB,aAClE,yBAAKxB,UAAU,QACVD,EAAMS,YAAYiB,MAEvB,yBAAKzB,UAAU,kBACVD,EAAMS,YAAYkB,OAEvB,yBAAK1B,UAAU,OACVD,EAAMS,YAAYmB,KAEvB,yBAAK3B,UAAU,WAAWD,EAAMS,YAAYoB,SAC5C,yBAAK5B,UAAU,YAAYD,EAAMS,YAAYqB,e,QGZ1CC,G,YATD,SAAC/B,GACX,OACI,2BACIkB,KAAK,SACLc,YAAY,oBACZC,SAAU,SAACC,GAAD,OAAWlC,EAAMmC,mBAAmBD,QCO3CE,EAZA,SAACpC,GACZ,OACI,0BAAMC,UAAU,eACZ,kBAAC,EAAD,CACIiB,KAAK,SACLc,YAAahC,EAAMgC,YACnBG,mBAAoB,SAACD,GAAD,OAAWlC,EAAMqC,OAAOH,EAAMI,OAAOC,YCc1DC,EApBI,SAACxC,GAChB,OACI,yBAAKC,UAAU,cACX,yBAAKwC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,kBAC3C,yBAAK1C,UAAU,mBAAmBD,EAAM4C,WAAWlB,MACnD,4BAAQzB,UAAU,QAAlB,SAEJ,yBAAKA,UAAU,sBAEPD,EAAM4C,WAAWC,UACjB,yBAAK5C,UAAU,kBAAkBD,EAAM4C,WAAWC,UAEtD,yBAAK5C,UAAU,yBACV,eCfY,SAAC6C,GAC9B,IAeIC,EAfiB,CACjB,EAAK,MACL,EAAK,MACL,EAAK,MACL,EAAK,MACL,EAAK,MACL,EAAK,MACL,EAAK,MACL,EAAK,MACL,EAAK,MACL,GAAM,MACN,GAAM,MACN,GAAM,QAEVD,EAAO,IAAIE,KAAKF,IACcG,WAAa,GACvCC,EAAMJ,EAAKK,UACf,MAAM,GAAN,OAAUD,EAAV,YAAiBH,EAAjB,YAA0BD,EAAKM,eDHGC,CAAkBrD,EAAM4C,WAAWU,eEwD1D/C,eAZS,SAAAC,GACpB,MAAO,CACH+C,aAAc/C,EAAME,QAAQ6C,iBAIT,SAAA5C,GACvB,MAAO,CACH6C,sBAAuB,kBAAM7C,GNxC1B,SAAAA,GACHE,IAAMC,IAAN,sDACKC,MAAK,SAAAC,GACEA,EAASC,OACTN,EAVkC,CAClDO,KCjBiC,wBDkBjCqC,aAQ6CvC,EAASC,OACtCI,MAAM,iBAGbF,OAAM,SAAAC,cMoCJb,EAhEM,SAACP,GAAW,IAAD,EAE4ByD,mBAAS,IAFrC,mBAErBC,EAFqB,KAECC,EAFD,OAGUF,mBAAS,IAHnB,mBAGrBG,EAHqB,KAGRC,EAHQ,KAK5BvC,qBAAU,WACNtB,EAAMwD,0BACP,IAEH,IDKoBM,ECsBpB,OAFAC,QAAQC,IAAI,mBAAoBhE,EAAMuD,cAGlC,yBAAKtD,UAAU,gBACX,kBAAC,EAAD,CAAQoC,OAAQ,SAACE,GAAD,OA7BC,SAACA,GACtB,IAAMmB,EAAuB1D,EAAMuD,aAAaU,QAAO,SAAAH,GACnD,OAAgE,IAAzDA,EAAKpC,KAAKwC,cAAc7B,OAAOE,EAAM2B,kBAEhDH,QAAQC,IAAI,2BAA4BN,GACxCG,EAAetB,GACfoB,EAAwBD,GAuBOS,CAAiB5B,MAC5C,6BACCqB,EAAYQ,OAAS,EApBtBV,EAAqBW,KAAI,SAAAP,GACrB,OAAO,kBAAC,EAAD,CAAYlB,WAAYkB,OAOnC9D,EAAMuD,aAAac,KAAI,SAAAP,GACnB,OAAO,kBAAC,EAAD,CAAYlB,WAAYkB,SDdvB,kBADAA,EC4BCF,IDxBE,KAAhBE,EAAKQ,SAIU,ICoB4BZ,EDpBvCU,QCqBC,wBAAInE,UAAU,iBAAd,qBCtCDsE,EARC,SAACvE,GACb,OACI,yBAAKC,UAAU,WACX,kBAAC,EAAD,CAAaQ,YAAaT,EAAMS,cAChC,kBAAC,EAAD,QCKG+D,EAVH,SAACxE,GACT,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,EAAD,SCIIwE,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASC,MACvB,2D,YCbOC,EAAe,SAACC,EAAWC,GACpC,OAAO,eACAD,EADP,GAEOC,ICJLC,EAAe,CACjBvE,YAAa,GACb8C,aAAc,IAGZ0B,EAAiB,SAACzE,EAAO0E,GAC3B,OAAOL,EAAarE,EAAO,CACvBC,YAAayE,EAAOzE,eAItB0E,EAAsB,SAAC3E,EAAO0E,GAChC,OAAOL,EAAarE,EAAO,CACvB+C,aAAc2B,EAAO3B,gBAed7C,EAXC,WAAmC,IAAlCF,EAAiC,uDAAzBwE,EAAcE,EAAW,uCAC9C,OAAQA,EAAOhE,MACX,IVlBwB,mBUmBpB,OAAO+D,EAAezE,EAAO0E,GACjC,IVnB6B,wBUoBzB,OAAOC,EAAoB3E,EAAO0E,GACtC,QACI,OAAO1E,ICVb4E,EAAcC,YAAgB,CAChC3E,QAAS6D,IAMPe,EAAmBZ,OAAOa,sCAAwCC,IAKlEC,EAAQC,YAAYN,EAAaE,EACnCK,YAAgBC,OAOdC,EACF,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,IAAD,CAAeK,SA5Bb,IAAN,OAAWC,sBAAuBC,MAAM,KAAKC,QA6BrC,kBAAC,EAAD,QAKZC,IAASC,OAAON,EAAKO,SAASC,eAAe,SHqFvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzF,MAAK,SAAA0F,GACJA,EAAaC,gBAEdvF,OAAM,SAAAC,GACL2C,QAAQ3C,MAAMA,EAAMuF,c","file":"static/js/main.7bda98be.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header d-flex justify-content-between\">\n            Vedantu\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Menu.css';\n\nconst Menu = (props) => {\n    return (\n        <div class=\"menu\">\n            <a href=\"#Overview\">Overview</a>\n            <a href=\"#Repositories\">Repositories</a>\n            <a href=\"#Projects\">Projects</a>\n        </div>\n    );\n};\n\nexport default Menu\n","import React from 'react';\nimport Header from '../Header/Header';\nimport Menu from '../Menu/Menu';\n// import Footer from '../Footer/Footer';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout\">\n            <Header />\n            <Menu />\n            {props.children}\n            {/* <Footer /> */}\n        </div>\n    );\n};\n\nexport default Layout;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreaters from '../../../store/actions';\nimport './ProfileData.css';\n\nconst ProfileData = (props) => {\n\n    useEffect(() => {\n        props.onGetProfileData();\n    }, []);\n\n    return (\n        <div className=\"profile-data\">\n            <img className=\"profile-pic\" alt='vedantu' src={props.profileData.avatar_url} />\n            <div className=\"name\">\n                {props.profileData.name}\n            </div>\n            <div className=\"login-username\">\n                {props.profileData.login}\n            </div>\n            <div className=\"bio\">\n                {props.profileData.bio}\n            </div>\n            <div className=\"company\">{props.profileData.company}</div>\n            <div className=\"location\">{props.profileData.location}</div>\n        </div>\n    );\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        profileData: state.content.profileData,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onGetProfileData: () => dispatch(actionCreaters.getProfileData())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileData);\n","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const setProfileData = (profileData) => ({\n    type: actionTypes.SET_PROFILE_DATA,\n    profileData\n});\n\nexport const getProfileData = () => {\n    return dispatch => {\n        axios.get(`https://api.github.com/users/supreetsingh247`)\n            .then(response => {\n                if (response.data) {\n                    dispatch(setProfileData(response.data));\n                }\n            })\n            .catch(error => {\n                alert('Api error');\n            });\n    };\n};\n\nexport const setUserRepositories = (repositories) => ({\n    type: actionTypes.SET_USER_REPOSITORIES,\n    repositories\n});\n\nexport const getUserRepositories = () => {\n    return dispatch => {\n        axios.get(`https://api.github.com/users/supreetsingh247/repos`)\n            .then(response => {\n                if (response.data) {\n                    dispatch(setUserRepositories(response.data));\n                    alert('Api error');\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n","/*\n * Define which type of action to be dispatched to reducer\n */\n\n// Content\nexport const SET_PROFILE_DATA = 'SET_PROFILE_DATA';\nexport const SET_USER_REPOSITORIES = 'SET_USER_REPOSITORIES';\n","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n    return (\n        <input\n            type='search'\n            placeholder='Search repository'\n            onChange={(event) => props.inputChangeHandler(event)} />\n    );\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from '../Input/Input';\n\nconst Search = (props) => {\n    return (\n        <form className=\"input-group\">\n            <Input\n                type=\"search\"\n                placeholder={props.placeholder}\n                inputChangeHandler={(event) => props.search(event.target.value)}\n            />\n        </form>\n    );\n};\n\nexport default Search;\n","import React from 'react';\nimport { convertDateFormat } from '../../../../helpers/miscellenous';\n\nconst Repository = (props) => {\n    return (\n        <div className=\"repository\">\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div className=\"repository-name\">{props.repository.name}</div>\n                <button className=\"star\">Star</button>\n            </div>\n            <div className=\"repository-details\">\n                {\n                    props.repository.language &&\n                    <div className=\"languages-used\">{props.repository.language}</div>\n                }\n                <div className=\"repo-lastUpdated mt-4\">\n                    {\"Updated on  \" + convertDateFormat(props.repository.pushed_at)}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Repository;\n","\nexport const convertDateFormat = (date) => {\n    const monthInWords = {\n        '1': 'Jan',\n        '2': 'Feb',\n        '3': 'Mar',\n        '4': 'Apr',\n        '5': 'May',\n        '6': 'Jun',\n        '7': 'Jul',\n        '8': 'Aug',\n        '9': 'Sep',\n        '10': 'Oct',\n        '11': 'Nov',\n        '12': 'Dec'\n    };\n    date = new Date(date);\n    let month = monthInWords[date.getMonth() + 1];\n    let day = date.getDate();\n    return `${day} ${month} ${date.getFullYear()}`\n};\n\nexport const isEmpty = (item) => {\n    if (typeof item === 'number') {\n        return false;\n    }\n    return item.trim() === '';\n};\n\nexport const isArrayEmpty = (arr) => {\n    return arr.length === 0;\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreaters from '../../../store/actions';\nimport './Repositories.css';\nimport Search from '../../Search/Search';\nimport Repository from './Repository/Repository';\nimport { isEmpty, isArrayEmpty } from '../../../helpers/miscellenous';\n\nconst Repositories = (props) => {\n\n    const [searchedRepositories, setSearchedRepositories] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n\n    useEffect(() => {\n        props.onGetUserRepositories();\n    }, []);\n\n    const searchRepository = (value) => {\n        const searchedRepositories = props.repositories.filter(item => {\n            return item.name.toLowerCase().search(value.toLowerCase()) !== -1;\n        });\n        console.log('==searchedRepositories==', searchedRepositories);\n        setSearchValue(value);\n        setSearchedRepositories(searchedRepositories);\n    };\n\n    const getSearchedRepositories = () => {\n        return (\n            searchedRepositories.map(item => {\n                return <Repository repository={item} />\n            })\n        );\n    };\n\n    const getRepositories = () => {\n        return (\n            props.repositories.map(item => {\n                return <Repository repository={item} />\n            })\n        );\n    };\n\n    console.log('==repositories==', props.repositories);\n\n    return (\n        <div className=\"repositories\">\n            <Search search={(value) => searchRepository(value)} />\n            <hr />\n            {searchValue.length > 0 ? getSearchedRepositories() : getRepositories()}\n            {\n                !isEmpty(searchValue) && isArrayEmpty(searchedRepositories) &&\n                <h1 className=\"no-data-found\">\n                    No Data Found\n                </h1>\n            }\n        </div>\n    );\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        repositories: state.content.repositories,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onGetUserRepositories: () => dispatch(actionCreaters.getUserRepositories())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Repositories);\n","import React from 'react';\nimport './Content.css';\nimport ProfileData from './ProfileData/ProfileData';\nimport Repositories from './Repositories/Repositories';\n\nconst Content = (props) => {\n    return (\n        <div className=\"content\">\n            <ProfileData profileData={props.profileData} />\n            <Repositories />\n        </div>\n    );\n};\nexport default Content;\n\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport Content from './components/Content/Content';\n\nconst App = (props) => {\n    return (\n        <div className=\"app\">\n            <Layout>\n                <Content />\n            </Layout>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * This is the basic function vastly used in in reducers to update or concatinate\n * their old object with new properties\n */\n\nexport const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};\n","\nimport * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    profileData: {},\n    repositories: []\n};\n\nconst setProfileData = (state, action) => {\n    return updateObject(state, {\n        profileData: action.profileData\n    });\n};\n\nconst setUserRepositories = (state, action) => {\n    return updateObject(state, {\n        repositories: action.repositories\n    });\n};\n\nconst content = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_PROFILE_DATA:\n            return setProfileData(state, action);\n        case actionTypes.SET_USER_REPOSITORIES:\n            return setUserRepositories(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default content;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Content from './store/reducer/content';\n\nconst getBasename = () => {\n    return `/${process.env.PUBLIC_URL.split('/').pop()}`;\n};\n\n/*\n * combining all the reducers\n */\nconst rootReducer = combineReducers({\n    content: Content\n});\n\n/*\n * composeEnhancers is for chrome dev toolbar which helps us see store management of redux\n */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n/*\n * Creating Store and applying middleware \n */\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\n/*\n * Wrapping the main app with BrowserRouter (provides routing and helps us navigate through project)\n * Provider is a part of Redux which is needed in order to get access to store throughout our project \n */\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={getBasename()}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}